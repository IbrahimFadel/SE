pub trait Add<T> {
    type Output;

    // Checked addition, panics on overflow
    // For implementors that don't have overflow, this should be identical to `add_unchecked`
    fn add(other T) -> This::Output;
    fn add_unchecked(other T) -> This::Output;
}

apply Add<u64> to u64 {
    type Output = u64;
    fn add(other u64) -> This::Output {
        let U64_MAX = 18_446_744_073_709_551_615;

        let overflowed = other > U64_MAX - this;

        if overflowed {
            @flux.intrinsics.panic("unsigned integer overflow in addition")
        } else {
            this + other
        }
    }

    fn add_unchecked(other u64) -> This::Output => this + other
}

apply Add<u32> to u32 {
    type Output = s32;
    fn add(other u32) -> This::Output => this + other
    fn add_unchecked(other u32) -> This::Output => this + other
}

apply Add<u16> to u16 {
    type Output = u16;
    fn add(other u16) -> This::Output => this + other
    fn add_unchecked(other u16) -> This::Output => this + other
}

apply Add<u8> to u8 {
    type Output = u8;
    fn add(other u8) -> This::Output => this + other
    fn add_unchecked(other u8) -> This::Output => this + other
}

apply Add<s64> to s64 {
    type Output = s64;
    fn add(other s64) -> This::Output => this + other
    fn add_unchecked(other s64) -> This::Output => this + other
}

apply Add<s32> to s32 {
    type Output = s32;
    fn add(other s32) -> This::Output => this + other
    fn add_unchecked(other s32) -> This::Output => this + other
}

apply Add<s16> to s16 {
    type Output = s16;
    fn add(other s16) -> This::Output => this + other
    fn add_unchecked(other s16) -> This::Output => this + other
}

apply Add<s8> to s8 {
    type Output = s8;
    fn add(other s8) -> This::Output => this + other
    fn add_unchecked(other s8) -> This::Output => this + other
}
