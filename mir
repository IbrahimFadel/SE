LOCAL:
	mut,
	type

INSTRUCTIONS:
	STACK_ALLOC(LOCAL)
	HEAP_ALLOC(usize)
	CHECKED_ADD(x, y) -> { result, overflowed }
	CHECKED_MUL(x, y) -> { result, overflowed } (do fmul and stuff during LLVM IR stage)
	EQ(EXPR, EXPR) -> bool
	JMP_EQ(BOOL, BB1, BB2)

BASIC_BLOCK:
	statements

MEM_REF:
	LOCAL

RVAL:
	LOCAL | CONST_VAL

ASSIGN:
	MEM_REF
	RVAL

STORAGE_LIVE(LOCAL) llvm.lifetime.start
STORAGE_DEAD(LOCAL) llvm.lifetime.end

fn main(i32 x) -> i32 {
	i32 a, b, c = 0xff;

	if a == 2 {
	} else {
	}

	return a;
}

i32 main(i32 x) {

BB0:
	_0 = StackAlloc(i32);
	Assign(_0, 255);
	_1 = 255;
	_2 = 255;

	_3 = CMP_EQ(_0, 2);
	JMP_EQ(_3, BB1, BB2);

BB1:
	JMP(BB3);
BB2:
	JMP(BB3);
BB3:
	RET(_0);

}