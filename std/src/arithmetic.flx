
pub trait Add<T> {
	type Output;
	fn add(other T) -> This::Output;
}

apply Add<u64> to u64 {
	type Output = u64;
	fn add(other This) -> This::Output => @flux.intrinsics.add_u64(this, other)
}

apply Add<u32> to u32 {
	type Output = u32;
	fn add(other This) -> This::Output => @flux.intrinsics.add_u32(this, other)
}

apply Add<u16> to u16 {
	type Output = u16;
	fn add(other This) -> This::Output => @flux.intrinsics.add_u16(this, other)
}

apply Add<u8> to u8 {
	type Output = u8;
	fn add(other This) -> This::Output => @flux.intrinsics.add_u8(this, other)
}

apply Add<s64> to s64 {
	type Output = s64;
	fn add(other This) -> This::Output => @flux.intrinsics.add_s64(this, other)
}

apply Add<s32> to s32 {
	type Output = s32;
	fn add(other This) -> This::Output => @flux.intrinsics.add_s32(this, other)
}

apply Add<s16> to s16 {
	type Output = s16;
	fn add(other This) -> This::Output => @flux.intrinsics.add_s16(this, other)
}

apply Add<s8> to s8 {
	type Output = s8;
	fn add(other This) -> This::Output => @flux.intrinsics.add_s8(this, other)
}

pub trait Mul<T> {
	type Output;
	fn mul(other T) -> This::Output;
}

apply Mul<u64> to u64 {
	type Output = u64;
	fn mul(other This) -> This::Output => @flux.intrinsics.mul_u64(this, other)
}

apply Mul<u32> to u32 {
	type Output = u32;
	fn mul(other This) -> This::Output => @flux.intrinsics.mul_u32(this, other)
}

apply Mul<u16> to u16 {
	type Output = u16;
	fn mul(other This) -> This::Output => @flux.intrinsics.mul_u16(this, other)
}

apply Mul<u8> to u8 {
	type Output = u8;
	fn mul(other This) -> This::Output => @flux.intrinsics.mul_u8(this, other)
}

apply Mul<s64> to s64 {
	type Output = s64;
	fn mul(other This) -> This::Output => @flux.intrinsics.mul_s64(this, other)
}

apply Mul<s32> to s32 {
	type Output = s32;
	fn mul(other This) -> This::Output => @flux.intrinsics.mul_s32(this, other)
}

apply Mul<s16> to s16 {
	type Output = s16;
	fn mul(other This) -> This::Output => @flux.intrinsics.mul_s16(this, other)
}

apply Mul<s8> to s8 {
	type Output = s8;
	fn mul(other This) -> This::Output => @flux.intrinsics.mul_s8(this, other)
}
